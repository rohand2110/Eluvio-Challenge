# -*- coding: utf-8 -*-
"""SWproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gsKErfMphexjZRHaLIO_GoZsqbjUNwq5

**Software Challenge:** Given a large number of binary files, write a program that finds the longest strand of bytes that is identical between two or more files

Mounting Drive with sample files
"""

import pandas as pd
from google.colab import drive
drive.mount('/content/drive')

import os
os.chdir('/content/drive/My Drive/Eluvio Challenge - Core Engineering/')

"""creating a list with all the bytes from the different samples"""

a =[]

for i in range(1,11):
  filename = "sample."+str(i)
  file = open(filename, "rb")
  byte = file. read(1)
  s =""
  while byte: 
    byte = file. read(1)
    s+=str(byte)
  file. close()
  a.append(s)

"""Installing suffix trees and using the longest common substring method to identify the longest substring"""

!pip install suffix-trees

from suffix_trees import STree

st = STree.STree(a)
max_len = len(st.lcs())

"""Iterating between all combinations of two between files. The maximum possible length would be between two files."""

import itertools
arr = list(itertools.combinations(range(0,4), 2))
indices = [range(0,10)]
for z in arr:
  r = STree.STree([a[z[0]],a[z[1]]])
  l = len(r.lcs())
  if l > max_len:
    indices = [(z[0],z[1])]
    max_len = l
    lcs_String = r.lcs()

  elif l == max_len:
    indices.append((z[0],z[1]))

"""Printing out relevant information about the longest common strand"""

print("Length of largest strand is ",max_len)
for index in indices:
  print("The file names which have the longest strand are sample."+str(index[0]+1)+" and sample."+str(index[1]+1))
  r2 = STree.STree([a[index[0]],a[index[1]]])
  p = STree.STree(a[index[0]])
  q = STree.STree(a[index[1]]) 
  print("Offsets for the files are "+str(p.find(r2.lcs()))+" and "+str(q.find(r2.lcs()))+" respectively.")